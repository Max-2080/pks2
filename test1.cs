using System;

class Program
{
    // Функция для вычисления факториала
    static double Factorial(int n)
    {
        // Проверка на отрицательное число - факториал определен только для неотрицательных чисел
        if (n < 0)
            throw new ArgumentException("Факториал определен только для неотрицательных чисел");
            
        // Факториал 0 равен 1 по определению
        if (n == 0) return 1;
        
        // Вычисляем факториал итеративно
        double result = 1;
        for (int i = 1; i <= n; i++)
            result *= i;  // Умножаем результат на каждое число от 1 до n
        return result;
    }

    // Функция для вычисления n-го члена ряда Маклорена для e^x
    static double GetNthTerm(double x, int n)
    {
        // Проверка корректности номера члена ряда
        if (n < 0)
            throw new ArgumentException("n должно быть неотрицательным числом");
            
        // Вычисляем n-й член: x в степени n, деленный на факториал n
        return Math.Pow(x, n) / Factorial(n);
    }

    // Функция для вычисления суммы ряда Маклорена для e^x с заданной точностью
    // Суммируем члены ряда до тех пор, пока очередной член не станет меньше заданной точности
    static double CalculateSeries(double x, double epsilon)
    {
        // Проверка корректности точности (должна быть положительной)
        if (epsilon <= 0)
            throw new ArgumentException("Точность должна быть положительным числом");

        // Инициализация переменных:
        double sum = 0;      // Текущая сумма ряда
        double term = 1;     
        int n = 0;           // Счетчик членов ряда (начинаем с нулевого члена)
         
        // Цикл суммирования: продолжаем пока абсолютное значение текущего члена больше точности
        while (Math.Abs(term) > epsilon)
        {
            sum += term;     // Добавляем текущий член к общей сумме
            n++;             // Переходим к следующему члену ряда
            term = Math.Pow(x, n) / Factorial(n); // Вычисляем следующий член ряда
        }
         
        // Возвращаем полученную сумму ряда
        return sum;
    }

    static void Main()
    {
        try
        {
            // Блок ввода и вычислений с обработкой ошибок
            
            // Ввод значения x
            Console.WriteLine("Введите x:");
            if (!double.TryParse(Console.ReadLine(), out double x))
            {
                Console.WriteLine("Ошибка: введите корректное число для x");
                return;  // Завершаем программу при некорректном вводе
            }
             
            // Ввод точности вычислений
            Console.WriteLine("Введите точность (e < 0.01):");
            if (!double.TryParse(Console.ReadLine(), out double epsilon))
            {
                Console.WriteLine("Ошибка: введите корректное число для точности");
                return;  // Завершаем программу при некорректном вводе
            }
            
            // Проверка корректности точности:
            // Точность должна быть положительной и меньше 0.01
            if (epsilon >= 0.01 || epsilon <= 0)
            {
                Console.WriteLine("Точность должна быть положительным числом меньше 0.01");
                return;  // Завершаем программу при некорректной точности
            }
             
            // Вычисление суммы ряда с заданной точностью
            double result = CalculateSeries(x, epsilon);
            Console.WriteLine($"Значение функции с точностью {epsilon}: {result}");
             
            // Дополнительно: вычисление конкретного n-го члена ряда
            Console.WriteLine("\nВведите номер члена ряда (n):");
            if (!int.TryParse(Console.ReadLine(), out int n) || n < 0)
            {
                Console.WriteLine("Ошибка: n должно быть неотрицательным целым числом");
                return;  // Завершаем программу при некорректном вводе
            }
            
            // Вычисление и вывод n-го члена ряда
            double nthTerm = GetNthTerm(x, n);
            Console.WriteLine($"Значение {n}-го члена ряда: {nthTerm}");
        }
        catch (Exception ex)
        {
            // Обработка всех непредвиденных исключений
            Console.WriteLine($"Произошла ошибка: {ex.Message}");
        }
        
        // Программа завершает выполнение автоматически после окончания блока try-catch
    }
}